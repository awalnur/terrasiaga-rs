/// Repository implementations for the infrastructure layer
/// Provides concrete implementations of domain repository traits

use async_trait::async_trait;
use diesel::prelude::*;
use uuid::Uuid;
use crate::shared::{AppResult, error::AppError};
use crate::infrastructure::database::{DbPool, DbConnection};

pub mod user_repository;
pub mod disaster_repository;
pub mod location_repository;
pub mod notification_repository;

// Re-export repository implementations
pub use user_repository::PostgresUserRepository;
pub use disaster_repository::PostgresDisasterRepository;
pub use location_repository::PostgresLocationRepository;
pub use notification_repository::PostgresNotificationRepository;

// Helper function to get database connection
pub fn get_connection(pool: &DbPool) -> AppResult<DbConnection> {
    pool.get()
        .map_err(|e| AppError::Database(diesel::result::Error::DatabaseError(
            diesel::result::DatabaseErrorKind::UnableToSendCommand,
            Box::new(e.to_string())
        )))
}

// Import schema tables (these would be generated by Diesel)
// For now, we'll create placeholder modules
pub mod schema {
    pub mod disasters {
        use diesel::table;

        table! {
            disasters (id) {
                id -> Uuid,
                title -> Text,
                description -> Text,
                status -> Text,
                severity -> Text,
                latitude -> Float8,
                longitude -> Float8,
                reporter_id -> Uuid,
                location_id -> Nullable<Uuid>,
                created_at -> Timestamptz,
                updated_at -> Timestamptz,
            }
        }
    }

    pub mod users {
        use diesel::table;

        table! {
            users (id) {
                id -> Uuid,
                email -> Text,
                username -> Text,
                full_name -> Text,
                password_hash -> Text,
                role -> Text,
                is_active -> Bool,
                email_verified -> Bool,
                last_login -> Nullable<Timestamptz>,
                created_at -> Timestamptz,
                updated_at -> Timestamptz,
            }
        }
    }

    pub mod disaster_responders {
        use diesel::table;

        table! {
            disaster_responders (disaster_id, responder_id) {
                disaster_id -> Uuid,
                responder_id -> Uuid,
                assigned_at -> Timestamptz,
            }
        }
    }
}

// Use the schema modules
pub use schema::*;
